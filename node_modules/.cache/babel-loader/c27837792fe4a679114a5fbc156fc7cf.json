{"ast":null,"code":"import React from 'react';\nconst clientId = '417c796e8e7040baa5692e3aed49f27d';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      return accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      header: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(Response => {\n      Response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlayList(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com//v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/home/bea/Documents/bea/jamm/spotify/src/util/Spotify.js"],"names":["React","clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","header","Authorization","then","Response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlayList","trackURIs","length","headers","userId","response","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst clientId = '417c796e8e7040baa5692e3aed49f27d';\nconst redirectUri= 'http://localhost:3000/';\nlet accessToken\nconst Spotify = {\n   getAccessToken(){\n       if(accessToken){\n           return accessToken\n       } \n\n       const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\n       const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\n    if(accessTokenMatch && expiresInMatch){\n        accessToken= accessTokenMatch[1]\n        const expiresIn = Number(expiresInMatch[1])\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return accessToken;\n    }else {\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n\n        return accessUrl      \n     }\n   },\n    search(term) {\n        const accessToken=Spotify.getAccessToken()\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n        { header: {\n            Authorization: `Bearer ${accessToken}`\n        }\n        }).then(Response=>{\n            Response.json()\n        }).then(jsonResponse=>{\n           if (jsonResponse.tracks){\n               return []\n           }\n           return jsonResponse.tracks.items.map(track=>(\n               {\n                 id: track.id,\n                 name: track.name,\n                 artist: track.artists[0].name,\n                 album: track.album.name,\n                 uri:track.uri\n               }\n            )\n           )\n        })\n   },\n\n   savePlayList(name, trackURIs){\n       if(!name|| !trackURIs.length ){\n           return;\n       }\n    const accessToken = Spotify.getAccessToken()\n    const headers = { Authorization: `Bearer ${accessToken}`};\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers } \n     ).then(response=> response.json() \n     ).then(jsonResponse=> {\n         userId= jsonResponse.id;\n         return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n         {\n             headers:headers,\n             method:'POST',\n             body: JSON.stringify({name:name})\n         }).then(response=>response.json())\n         .then(jsonResponse=>{\n             const playlistId = jsonResponse.id\n             return fetch(`https://api.spotify.com//v1/users/${userId}/playlists/${playlistId}/tracks`,{\n                 headers: headers,\n                 method:'POST',\n                 body: JSON.stringify({uris:trackURIs})\n             })\n         })\n     })\n\n   }\n\n}\nexport default Spotify"]},"metadata":{},"sourceType":"module"}