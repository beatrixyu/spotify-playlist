{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","handleKeyPress","this","onSearch","e","setState","target","value","event","key","className","onChange","onKeyPress","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onRemove","onAdd","track","name","artist","album","renderAction","TrackList","trackObj","tracks","map","isRemoval","id","console","log","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","ok","json","jsonResponse","items","artists","uri","cover","images","url","preview","preview_url","savePlaylist","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","push","filter","currentTracks","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc5dbc06.chunk.js","sourcesContent":["import React from 'react'\n\nconst clientId = '417c796e8e7040baa5692e3aed49f27d';\nconst redirectUri= 'http://localhost:3000/';\n\nlet accessToken\n\nconst Spotify = {\n\n    // Gets access token from Spotify\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken;\n        }\n        const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\n        const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n        if (hasAccessToken && hasExpiresIn) {\n            accessToken = hasAccessToken[1];\n            const expiresIn = Number(hasExpiresIn[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    // Uses access token to return a response from the Spoitify API using user serach term from SearchBar\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(\n            response => { \n                if (response.ok) {\n                    return response.json();\n                } else {\n                    console.log('API request failed');\n                }\n        }).then(\n            jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri,\n                cover: track.album.images[2].url,\n                preview: track.preview_url\n            }));\n        });\n    },\n\n    // Gets a user's ID from Spotify, creates a new playlist on user's account, and adds tracks to that playlist\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName || !trackURIs.length) {\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        };\n        let userId;\n\n        // Return user's ID from Spotify API\n        return fetch('https://api.spotify.com/v1/me', {\n            headers: headers\n        }).then(\n            response => {\n                if(response.ok) {\n                    return response.json();\n                } \n        }).then(\n            jsonResponse => {\n                userId = jsonResponse.id;\n\n                // Adds playlist to user's account\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({name: playlistName})\n                }).then(\n                    response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        console.log('API request failed');\n                    }\n                }).then(\n                    jsonResponse => {\n                        const playlistId = jsonResponse.id;\n\n                        // Adds tracks to new playlist \n                        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                            headers: headers,\n                            method: 'POST',\n                            body: JSON.stringify({ uris: trackURIs})\n                        });\n                    });\n            });\n    }\n}\nexport default Spotify","import React from 'react'\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state= {\n      term: ''\n    }\n    this.search= this.search.bind(this)\n    this.handleTermChange= this.handleTermChange.bind(this)\n    this.handleKeyPress= this.handleKeyPress.bind(this)\n  }\n\n    // Sets the argument for the seearch method in App.js to the state of term\n  search(){\n    this.props.onSearch(this.state.term)\n  }\n  \n// Sets the state of term to the value the user enters in input\n   handleTermChange(e){\n     this.setState({term: e.target.value})\n   }\n\n   handleKeyPress(event) {\n    if(event.key === 'Enter') {\n      this.search();\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"SearchBar\">\n        <input \n        onChange = {this.handleTermChange}\n        onKeyPress={this.handleKeyPress}\n        placeholder=\"Enter A Song, Album, or Artist\" />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    )\n\n  }\n\n}\n\nexport default SearchBar","import React from 'react'\nimport './Track.css'\n\nclass Track extends React.Component {\n\n      constructor(props){\n        super(props)\n        this.addTrack = this.addTrack.bind(this)\n        this.removeTrack = this.removeTrack.bind(this)\n\n      }\n\n// Renders either a + or a - link to add or remove tracks from playlist.\n renderAction() {\n    if(this.props.onRemove){\n    return <button \n            className=\"Track-action\"\n            onClick={this.removeTrack} > - </button>\n     } else {\n    return <button \n            className=\"Track-action\" \n            onClick={this.addTrack}> + </button>\n     }\n }\n// Adds this.props.track as an argument to the addTrack method in App.js\n  addTrack(){\n    this.props.onAdd(this.props.track)\n  }\n\n// Adds this.props.track as an argument to the removeTrack method in App.js\n  removeTrack(){\n     this.props.onRemove(this.props.track)\n    }\n\nrender(){\n    return(\n        <div className=\"Track\">\n          <div className=\"Track-information\">\n            <h3>{this.props.track.name}</h3>\n            <p>{this.props.track.artist} | {this.props.track.album}</p>\n          </div>\n          {this.renderAction()}\n        </div>    \n        )\n        } \n      }\n\nexport default Track","import React from 'react'\nimport Track from '../Track/Track'\nimport './TrackList.css'\n\nclass TrackList extends React.Component {\n    render(){\n        let trackObj;\n        if(this.props.tracks){\n            trackObj=this.props.tracks.map(\n                track=>{\n                    return <Track \n                            track={track} \n                            key={track.id} \n                            onAdd={this.props.onAdd}\n                            tracks={this.props.tracks}\n                            onRemove={this.props.onRemove}\n                            isRemoval= {this.props.isRemoval}\n                            />\n                            \n                }\n            )\n        }\n        console.log(this.props.tracks, this.props.isRemoval)\n\n\n        return(\n            <div className=\"TrackList\" >\n             {trackObj}\n            </div>\n              )\n    }\n    \n\n}\n\nexport default TrackList","import React from 'react'\nimport TrackList from '../TrackList/TrackList'\nimport './SearchResults.css'\n\n\nclass SearchResults extends React.Component {\n\n render(){\n    return(\n        <div className=\"SearchResults\">\n          <h2>Results</h2>\n          <TrackList \n          tracks={this.props.searchResults} \n          onAdd={this.props.onAdd}\n          />        \n        </div>\n        )\n }\n}\n\nexport default SearchResults","import React from 'react'\n\nimport TrackList from '../TrackList/TrackList'\nimport './Playlist.css'\n\nclass Playlist extends React.Component {\n    constructor(props){\n      super(props)\n      this.handleNameChange = this.handleNameChange.bind(this)\n    }\n// Updates Playlist name to value user inputs\n  handleNameChange(e){\n    this.props.onNameChange(e.target.value)\n  }\n\n    render(){\n        return(\n            <div className=\"Playlist\">\n              <input \n              defaultValue={this.props.playlistName}\n              onChange={this.handleNameChange}\n              />\n            <TrackList \n                tracks={this.props.playlistTracks}\n                onRemove={this.props.onRemove}\n                isRemoval= {true}\n                />\n              <button \n              className=\"Playlist-save\"\n              onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n                )\n            \n    }\n\n}\n\nexport default Playlist","import React from 'react'\nimport SearchBar from './Components/SearchBar/SearchBar'\nimport SearchResults from './Components/SearchResults/SearchResults'\nimport Playlist from './Components/Playlist/Playlist'\nimport Spotify from './util/Spotify'\n\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      searchResults: [],\n      playlistName: 'baobao-playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  // Updates the name of the Playlist\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  // Adds track from Search Results to Playlist\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    // if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n    //  return;\n    //  this.setState(prevState => ({\n    //   playlistTracks: [...prevState.playlistTracks, track]\n    // }));\n  //  }\n   tracks.push(track);\n   this.setState({playlistTracks: tracks})\n }\n\n // Removes track from Playlist by filtering out track id from playlistTracks\n removeTrack(track){ \n  // this.setState({\n  //   playlistTracks: this.state.playlistTracks.filter(playlistTrack => playlistTrack.id !== track.id)\n  // });\n     let tracks = this.state.playlistTracks;\n     tracks = tracks.filter(currentTracks => currentTracks.id !== track.id)\n     this.setState({playlistTracks:tracks})   \n    }\n\n // Updates the name of the Playlist\n updatePlaylistName(name){\n     this.setState({\n      playlistName:name\n    })  \n }\n\n // Sends search term request to spotify and returns results of search in the search results panel\n search(term){\n  Spotify.search(term).then(searchResults=>{\n    this.setState({searchResults: searchResults})\n  }) \n}\n\n  // Saves playlist name and tracks to user's account\n savePlaylist(){\n   const trackURIs = this.state.playlistTracks.map(track=>track.uri)\n   Spotify.savePlaylist(this.state.playlistName,trackURIs).then(()=>{\n     this.setState({\n      playlistName:'New PlayList',\n      playlistTracks: []\n     })\n   })\n }\n\n\n  render(){\n    return (\n      <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n       <SearchBar \n           onSearch={this.search}/>\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n          <Playlist \n              playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks}\n              onRemove= {this.removeTrack}\n              onNameChange = {this.updatePlaylistName}\n              onSave={this.savePlaylist}\n              /> \n        </div>\n      </div>\n    </div>\n  );\n  }\n  }\n  \n  export default App;\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}